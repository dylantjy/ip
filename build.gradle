plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.gradleup.shadow' version '9.1.0'
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

/* ---- JavaFX: pull only your current platform classifier ---- */
def fxVersion = '22.0.2' // works fine on JDK 17+
def os = org.gradle.internal.os.OperatingSystem.current()
def arch = System.getProperty('os.arch').toLowerCase()
def platform =
        os.isMacOsX()   ? (arch.contains('aarch64') || arch.contains('arm') ? 'mac-aarch64' : 'mac') :
        os.isLinux()    ? 'linux' :
        /* windows */     'win'

dependencies {
    implementation "org.openjfx:javafx-base:${fxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${fxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${fxVersion}:${platform}"
    implementation "org.openjfx:javafx-fxml:${fxVersion}:${platform}"
}

application {
    // pick ONE main; you had two. Adjust to your actual entry point:
    mainClass = 'bruh.Launcher'
    applicationDefaultJvmArgs = [
        '-Dfile.encoding=UTF-8'
    ]
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
}

tasks.run {
    workingDir = projectDir
    standardInput = System.in
    // run with: ./gradlew run --args="foo bar"
}

/* ---- JARs & Shadow configuration ----
 * Make the fat jar be build/libs/bruh.jar and disable the thin jar.
 */
shadowJar {
    archiveFileName = 'bruh.jar'      // no '-all' classifier
    manifest {
        attributes('Main-Class': application.mainClass.get())
    }
}
jar {
    enabled = false
}

/* ---- Gradle 9 implicit dependency fixes ----
 * distZip, distTar, startScripts must depend on shadowJar.
 */
tasks.named('distZip')      { dependsOn tasks.named('shadowJar') }
tasks.named('distTar')      { dependsOn tasks.named('shadowJar') }
tasks.named('startScripts') { dependsOn tasks.named('shadowJar') }

/* ---- Checkstyle ---- */
checkstyle {
    toolVersion = '11.0.0'
    config = resources.text.fromFile("$rootDir/config/checkstyle/checkstyle.xml")
}
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

